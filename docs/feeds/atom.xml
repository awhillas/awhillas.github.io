<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alexander Whillas</title><link href="http://alexander.whillas.com/" rel="alternate"></link><link href="http://alexander.whillas.com/feeds/atom.xml" rel="self"></link><id>http://alexander.whillas.com/</id><updated>2023-06-26T00:00:00+12:00</updated><entry><title>Alphabetica Game Dev Log</title><link href="http://alexander.whillas.com/alphabetica-game-dev-log.html" rel="alternate"></link><published>2023-06-11T00:00:00+12:00</published><updated>2023-06-26T00:00:00+12:00</updated><author><name>Alexander Whillas</name></author><id>tag:alexander.whillas.com,2023-06-11:/alphabetica-game-dev-log.html</id><summary type="html">&lt;p&gt;A new game I&amp;rsquo;m working on to help kids learn to read.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;26 June, 2023 - Pivot (again) to Kivy&lt;/h2&gt;
&lt;p&gt;So while setting up pygame, which is really going back to basics, I was reminded of &lt;a href="https://kivy.org/"&gt;Kivy&lt;/a&gt; which is designed to make user interfaces. I discovered also that it was difficult to compile pygame for iOS, and that is a target of this project i.e. touch screens are what I&amp;rsquo;m designing for, and Kivy makes his easy out of the box.&lt;/p&gt;
&lt;p&gt;The only problem with Kivy is that its model is a but opaque and the documentation is in various stages of freshness. The API documentation seems up to date but doesn&amp;rsquo;t have so many examples of common use cases and the tutorials are over a decade old. There are &lt;a href="https://github.com/kivy/kivy/tree/master/examples"&gt;examples&lt;/a&gt; that I have yet to delve into, most of them are pushing a decade old.&lt;/p&gt;
&lt;h3&gt;On the Bevy front&lt;/h3&gt;
&lt;p&gt;I did a little experiment on Friday. I had a question that I posted in three places, the &lt;a href="https://github.com/bevyengine/bevy/discussions/8919"&gt;bevy github discussion&lt;/a&gt;, &lt;a href="https://stackoverflow.com/questions/76527423/how-to-get-the-actual-pixel-size-of-a-transformed-sprite-in-bevy"&gt;Stack Overflow&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/rust_gamedev/comments/14fkzwk/how_to_get_the_actual_pixel_size_of_a_transformed/?sort=new"&gt;r/rust_gamedev&lt;/a&gt;. The only one that got a reply and indeed and answer was Reddit (took 3 days). I think that Reddit works so well because developers go there for many reasons, news; gossip; ideas and help, all mixed together. So if you need help you have the highest chance the person with the answer&amp;rsquo;s eyeballs will see your post. Since the other two are just help support, people are less likely to look there. There is a threaded Help channel in the Discord that I didn&amp;rsquo;t look at which seems active, I&amp;rsquo;ll try that next time.&lt;/p&gt;
&lt;p&gt;So anyway the answer was you have to figure out scaling stuff yourself but you can get the info in the Transform:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;print_sprite_bounding_boxes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sprite_query&lt;/span&gt;: &lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Handle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;With&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Sprite&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;assets&lt;/span&gt;: &lt;span class="nc"&gt;Res&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Assets&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image_handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sprite_query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image_dimensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_handle&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;unwrap&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scaled_image_dimension&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;image_dimensions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bounding_box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Rect&lt;/span&gt;::&lt;span class="n"&gt;from_center_size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;truncate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;scaled_image_dimension&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bounding_box: {:?}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bounding_box&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;So since I got an answer I might persevere with it a bit longer.&lt;/p&gt;
&lt;h3&gt;New Strategy&lt;/h3&gt;
&lt;p&gt;I might do two versions of the project at the same time. Since it takes soooooo loooong to get Bev answers I&amp;rsquo;ll work in Bevy until I hit a blocker, ask a question and then swtich to Kivy until I hot a blocker and then switch back again. I really want to learn Rust and I don&amp;rsquo;t have the bandwidth to learn it separately from the one side project I do have time for so I&amp;rsquo;ll keep tyring to shoehorn it in.&lt;/p&gt;
&lt;h2&gt;23 June, 2023 - Pivot to pygame&lt;/h2&gt;
&lt;p&gt;So as much as I like the setup of Bevy&amp;rsquo;s ECS I hit a major road block and can&amp;rsquo;t get any help on it. I basically want to get the pixel size of a scaled image and there doesn&amp;rsquo;t seem to be any way to do that in Bevy. I think because transforms are in WebGPU (WGPU) and Bevy its a one way street with from Bevy to WGPU.&lt;/p&gt;
&lt;p&gt;I found a hard time getting help with this as the Bevy subreddit has been taken down due the the &lt;a href="https://www.eff.org/deeplinks/2023/06/what-reddit-got-wrong?utm_source=pocket_saves"&gt;Reddit hullabaloo&lt;/a&gt; that is going on. The moderator didn&amp;rsquo;t bother with a transition period so there is nowhere to ask questions. I tried posting the same question on the &lt;a href="https://github.com/bevyengine/bevy/discussions/8919"&gt;bevy&amp;rsquo;s github discussion board&lt;/a&gt;, &lt;a href="https://www.reddit.com/r/rust_gamedev/comments/14fkzwk/how_to_get_the_actual_pixel_size_of_a_transformed/"&gt;/r/rust_gamedev&lt;/a&gt; and &lt;a href="https://stackoverflow.com/questions/76527423/how-to-get-the-actual-pixel-size-of-a-transformed-sprite-in-bevy"&gt;Stack Overflow&lt;/a&gt; to see which one would get a response but so far nada.&lt;/p&gt;
&lt;p&gt;In the mean time my son needs some help with reading so I&amp;rsquo;m going to pivot to pygame as I know I can bag out something fast.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll learn Rust on one of my other side projects. I think approaching it from the other side, see what low hanging fruit there is a and make a game around it rather than fighting Bevy to do something specific. There is a &lt;a href="https://github.com/dimforge/salva"&gt;fluid simulation lib&lt;/a&gt; I found (which is based on a good, &lt;a href="https://nalgebra.org/"&gt;pure Rust linear algebra lib&lt;/a&gt;) which would be fun for kids as they love water parks especially sandpits with water!&lt;/p&gt;
&lt;h3&gt;Starting at the end&lt;/h3&gt;
&lt;p&gt;So the first thing I want to do is figure out how to make a n executable from my python script so I can CI/CD all the time and have it playable on 3 OSes (not sure if i get it working on MacOS if that will work on an iPad as that would be a great market). There are two options I can see &lt;a href="https://pyinstaller.org/en/stable/"&gt;pyInstaller&lt;/a&gt; and &lt;a href="https://cx-freeze.readthedocs.io/en/latest/"&gt;cx_Freeze&lt;/a&gt;. In both cases you need to run their build on the target OS.&lt;/p&gt;
&lt;h2&gt;15th June, 2023 - Sound problems&lt;/h2&gt;
&lt;p&gt;SO I have the button on the screen and it makes a sound when you press it. If you smash the button, which 5yos will do, it triggers so much that I fear the app will crash. I thought to try and fix this by installing a Bevy Kira extension but it very difficult to install. Will ask on some forums how to get it going. Don&amp;rsquo;t want to lose momentum so I&amp;rsquo;ll just use the built in stuff. Sound always plays second fiddle to graphics in games.&lt;/p&gt;
&lt;p&gt;Next I need to investigate &lt;a href="https://bevy-cheatbook.github.io/programming/events.html"&gt;events&lt;/a&gt; in Bevy and get the letters spawning when the button is pressed. I&amp;rsquo;m thinking SVG for letters so I can go crazy with fonts.&lt;/p&gt;
&lt;h3&gt;Bevy Events&lt;/h3&gt;
&lt;p&gt;There are pretty simple. Four steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a plain public struct for the event&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;MyEvent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Register it on your main app&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;::&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_event&lt;/span&gt;::&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Trigger events in a system using an EventWriter&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;some_system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;somthing_happened_event&lt;/span&gt;: &lt;span class="nc"&gt;EventWriter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;somthing_happened_event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyEvent&lt;/span&gt;&lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Then receive the event in as many systems as you like&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;debug_system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;somthing_happened_events&lt;/span&gt;: &lt;span class="nc"&gt;EventReader&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;somthing_happened_events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="fm"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Somthing did indeed happen...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;13th June, 2023 - First steps&lt;/h2&gt;
&lt;p&gt;So after watching a few game dev videos on YouTube about indie success stories, they seem to recommend keeping a game dev log to help with motivation. So here I am.&lt;/p&gt;
&lt;p&gt;My son is five and a half and beginning to learn to read. Tonight actually he spelt out the word &amp;lsquo;wash&amp;rsquo; in a Sesame Street book I was reading him to my amazement. I wanted to make a game for him to help him with the sounding out of letters and ultimately help him to sound out letters. My only fear is that it will take too long and he wont need it by the time I finish.&lt;/p&gt;
&lt;p&gt;I did start to look into phonetics and phenomes, there are 44 in the English language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Phonemes are taught as part of the Phonics Phases 1-6 and are a key method in helping children learn how to read. Phonics links phonemes, or the sounds, with the graphemes, or letters, they represent.
&lt;a href="https://www.twinkl.co.nz/teaching-wiki/phoneme"&gt;cite&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Sound&lt;/h3&gt;
&lt;p&gt;I found this great video of a woman sounding out each of them.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/XUCUhHUDZIY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I downloaded the video, extracted the sound, converted it to WAV, used Audacity to cut it up into individual voicings and then had to convert them to Ogg Vorbis audio format because I couldn&amp;rsquo;t find any documentation on what audio types Bevy accepts out of the box other than the example of &lt;code&gt;.ogg&lt;/code&gt; files. I still have to go through all of them and name them something useful. There are 4 soundings of each phoneme and a word example for each.&lt;/p&gt;
&lt;h3&gt;Fonts!&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;d forgotten how much fun fonts can be! Its going to be easy to give letters character using different fonts.&lt;/p&gt;
&lt;h3&gt;Follow the fun&lt;/h3&gt;
&lt;p&gt;But how to make it fun? I have a very basic idea of what I&amp;rsquo;m going to start with and hope by getting my son to play test it I can figure out what he likes about it a follow that. I saw a video by &lt;a href="https://www.wikiwand.com/en/Sid_Meier"&gt;Sid Meier&lt;/a&gt; (Sim City, The Sims) on Master Class about making games and his advise was to prototype ideas fast and test them for fun. You wont always know until you play what mechanic/dynamic will be the fun part. &amp;ldquo;Follow the fun!&amp;rdquo;.&lt;/p&gt;</content><category term="Rust"></category></entry><entry><title>Solid Pod Server</title><link href="http://alexander.whillas.com/solid-pod-server.html" rel="alternate"></link><published>2023-05-28T00:00:00+12:00</published><updated>2023-05-28T00:00:00+12:00</updated><author><name>Alexander Whillas</name></author><id>tag:alexander.whillas.com,2023-05-28:/solid-pod-server.html</id><summary type="html">&lt;p&gt;Trying to get behind the linked data movement by following Tim Berners-Lee&amp;rsquo;s latest crazy vision of the future of the web.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://solidproject.org/"&gt;Solid&lt;/a&gt; is an attempt at making standards for returning control over your data, getting it out of the big tech silos. You run your own content server called a Solid Pod that you keep all your data in and control access to third party web apps to via OAuth2.&lt;/p&gt;
&lt;h1&gt;Some background&lt;/h1&gt;
&lt;p&gt;Tim Berners-Lee started the Solid Project which is a lose collection of standards, still in its infancy after more than a decade, which defines Solid Pod Servers, which are an online identity for you, described in Turtle/RDF and a place to keep your public and private data. The&lt;/p&gt;
&lt;h2&gt;The idea&lt;/h2&gt;
&lt;p&gt;I was thinking this might take off more if it was easy to deploy a personal solid server on a cloud provider where storage is cheap and you could use lambda/cloud functions to do the serving i.e. your not paying for them when they are not being used. Uses OAuth2 as authentication and the server is just a web server so all the components are already available as Rust crates, just have to bring it together. I&amp;rsquo;ve also seen some examples of using &lt;a href="https://github.com/nogibjj/rust-mlops-template/tree/main/lambdathreads"&gt;Rust for AWS lambda functions&lt;/a&gt; and apparently is much cheaper because of the speedup.&lt;/p&gt;
&lt;h2&gt;Persistent storage on the cheap?&lt;/h2&gt;
&lt;p&gt;The OAuth2 server needs to some persistent state to track the sessions and their details. Persistent state can be expensive in cloud as databases are not cheap.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DynamoDB on AWS is &lt;a href="https://aws.amazon.com/free/database/?p=ft&amp;amp;z=subnav&amp;amp;loc=3"&gt;aways free&lt;/a&gt; under a certain amount (which it should be). There are &lt;a href="https://docs.aws.amazon.com/sdk-for-rust/latest/dg/rust_dynamodb_code_examples.html"&gt;Rust examples&lt;/a&gt;. Does force vendor lock in to AWS :( There are &lt;a href="https://docs.aws.amazon.com/sdk-for-rust/latest/dg/rust_dynamodb_code_examples.html"&gt;examples using the Rust SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS &lt;a href="https://aws.amazon.com/simpledb/"&gt;SimpleDB&lt;/a&gt;: Amazon SimpleDB is a highly available NoSQL data store that offloads the work of database administration. 25 SimpleDB Machine Hours and 1 GB of Storage for free each month. Sadlt there are no examples online for using SimpleDB and rust :(&lt;/li&gt;
&lt;li&gt;Keep a SQLite file in a bucket and load it for every request? Vendor agnostic but might be slow?&lt;/li&gt;
&lt;/ul&gt;</content><category term="Rust"></category></entry><entry><title>Learning Rust</title><link href="http://alexander.whillas.com/learning-rust.html" rel="alternate"></link><published>2023-04-29T00:00:00+12:00</published><updated>2023-06-23T00:00:00+12:00</updated><author><name>Alexander Whillas</name></author><id>tag:alexander.whillas.com,2023-04-29:/learning-rust.html</id><summary type="html">&lt;p&gt;Why I&amp;rsquo;m learning Rust and how I&amp;rsquo;m doing it.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;But why&amp;hellip;?&lt;/h2&gt;
&lt;p&gt;Its always good to make decision based on data.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Graph from Stackoverflow Trends. Extrapolate the lines..." src="http://alexander.whillas.com/images/cpp_vs_rust_2023.svg" /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m interested in Rust as I predict it will overtake C++ in popularity within the next 1-2 years if the trends in the above graph from &lt;a href="https://insights.stackoverflow.com/trends?tags=c%2B%2B%2Crust"&gt;Stackoverflow Trends&lt;/a&gt; continues. Rust is growing in popularity exponentially and C++ seems to have a linear decline.&lt;/p&gt;
&lt;p&gt;There is also the results of the &lt;a href="https://survey.stackoverflow.co/2023/?utm_source=banner&amp;amp;utm_medium=display&amp;amp;utm_campaign=dev-survey-results-2023&amp;amp;utm_content=survey-results#section-admired-and-desired-programming-scripting-and-markup-languages"&gt;Stackoverflow Annual Survey for 2023 Admired and Desired section&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is the most admired language, more than 80% of developers that use it want to use it again next year&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reasons for this, I think, are many.&lt;/p&gt;
&lt;p&gt;Rust has a built in package manager which also handles compilation and makes the developer experience easy. Easy always trumps difficult, every time&lt;sup id="fnref:everytime"&gt;&lt;a class="footnote-ref" href="#fn:everytime"&gt;2&lt;/a&gt;&lt;/sup&gt;. This is a huge boon to productivity and also a huge breath of fresh air after C++. It took me about 6 weeks to get started with C++ (finding a package manager amongst many, trying to understand CMake). I think what is happening is young&lt;sup id="fnref:young"&gt;&lt;a class="footnote-ref" href="#fn:young"&gt;1&lt;/a&gt;&lt;/sup&gt;, C++ developers are trying Rust and then being won over by this after struggling through C++.&lt;/p&gt;
&lt;p&gt;Rust has a lot of modern language features like the Monads Option(Maybe) and Result(Either) which tackle uncertainty up front. They are used consistently and everywhere within the standard lib.&lt;/p&gt;
&lt;p&gt;&lt;img alt="C++ vs Rust meme" src="http://alexander.whillas.com/images/cpp_vs_rust_meme.png" /&gt;&lt;/p&gt;
&lt;p&gt;Some C++ people say that the syntax is horrible, but I find it quite a contrary. I&amp;rsquo;ve studied C++ for a year and I still can&amp;rsquo;t open a C++ project and understand it. For example compare a tokenizer written in C++, Google&amp;rsquo;s &lt;a href="https://github.com/google/sentencepiece"&gt;sentencepiece&lt;/a&gt; written in a modern C++ style and following the conventions of Google&amp;rsquo;s C++ guideline (presumably), verse OpenAI&amp;rsquo;s &lt;a href="https://github.com/openai/tiktoken"&gt;TikToken&lt;/a&gt; which are both &lt;a href="https://www.wikiwand.com/en/Byte_pair_encoding"&gt;BPE&lt;/a&gt; tokeniser. I know what they both do so it should be easy to interpret the code, right?&lt;/p&gt;
&lt;p&gt;To start with I have no idea where to begin with the C++ project. There are no conventions for project layout or naming stuff. I know CMake is the de facto build tool for C++ but the &lt;a href="https://github.com/google/sentencepiece/blob/master/CMakeLists.txt"&gt;CMakeLists.txt&lt;/a&gt; file is long and cryptic. It imperative unlike the declarative Cargo.toml of TiKToken which is much shorter (21 lines vs 170!). I know exactly where to look for the entry point in any Rust project in ether the &lt;code&gt;src/lib.rs&lt;/code&gt; if it a library or the &lt;code&gt;src/main.rs&lt;/code&gt; if its an executable.&lt;/p&gt;
&lt;p&gt;The splitting of C++ code into header files and implementation files is bananas. No other language does this, is laborious to write and painful to read.&lt;/p&gt;
&lt;p&gt;But I guess the real genius of Rust is that it ditched Object Oriented Programming while keeping its best feature: polymorphism.&lt;/p&gt;
&lt;h2&gt;Current problems with Rust&lt;/h2&gt;
&lt;p&gt;The main thing Rust suffers from right now is being young. A lot of the ecosystem is immature. This is changing rapidly and there are opportunities for keen, young developers to get in there and become a major part of the ecosystem.&lt;/p&gt;
&lt;p&gt;No native linear algebra libraries or &lt;a href="https://www.reddit.com/r/rust/comments/smdl3m/rust_and_scientifichighperformance_computing/"&gt;Scientific/High-Performance Computing&lt;/a&gt; (HPC). It does have bindings for OpenBLAS a C++ lib but its apparently a nightmare to get working cross platform. This holds it back from deep learning and general data science which both rely heavily on matrix operations. &lt;a href="https://www.reddit.com/r/rust/comments/obghx7/fast_linear_algebra_library_for_rust/"&gt;But this is changing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But its still early days and I think these issues will be address in time.&lt;/p&gt;
&lt;h1&gt;But How?&lt;/h1&gt;
&lt;p&gt;Here are some materials I&amp;rsquo;ve been using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLai5B987bZ9CoVR-QEIN9foz4QCJ0H2Y8"&gt;The Rust Lang Book video series&lt;/a&gt; is quite handy to get up to speed on Rust quickly. Its basically going over the official &lt;a href="https://doc.rust-lang.org/book/"&gt;The Rust Programming Language Book&lt;/a&gt; which takes you through all the features of Rust in a systematic way. I find someone going over the material (at double speed) seems to be easier than reading the material directly. But its not enough by itself. Need to apply what I&amp;rsquo;ve learning quickly or else it doesn&amp;rsquo;t sink in.&lt;ul&gt;
&lt;li&gt;There is also an interactive &lt;a href="https://rust-book.cs.brown.edu/"&gt;quiz based&lt;/a&gt; leaning aid that I just discovered while writing this. I have never been into puzzels that much but I know if you don&amp;rsquo;t try to apply what you have just learnt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLVnntJRoP85JHGX7rGDu6LaF3fmDDbqyd"&gt;Learn Bevy Engine 0.10 Beginner Tutorial Series&lt;/a&gt; &lt;a href="https://bevyengine.org/"&gt;Bevy&lt;/a&gt; is an &lt;a href="https://www.wikiwand.com/en/Entity_component_system"&gt;ECS&lt;/a&gt; game system. ECS are all the range in game development because they are fast because they take advantage of CPU caching. This tutorial series takes you from zero to build a basic interactive game and give you a template for your own project. Although I&amp;rsquo;m not familiar will all of Rust&amp;rsquo;s syntax I find learning by doing the best strategy. I&amp;rsquo;ve just finished the first 10 episodes which is all there is at this time. Time to make my first game with this template.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;First steps&lt;/h2&gt;
&lt;p&gt;Some projects I&amp;rsquo;m thinking of starting or have started in current order of enthusiasm:&lt;/p&gt;
&lt;!-- - [Alphabetica Game]({filename}/alphabetica.md) - My son is learning to read at the moment and I think a game to help him match letters to sounds might help. Repetition is the key. I'm going to build it off the back of the Bevy tutorial I've been going through. --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://alexander.whillas.com/realtime-machine-learning.html"&gt;Online Machine Learning&lt;/a&gt; - I&amp;rsquo;ve seen some simple simulations on YouTube where people evolve neural networks (NN) to operate, embodied in a simple simulated environment. I want to do something similar but I want to do online/real-time training of the NN. I think this will lead to a more aware AI.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/awhillas/check"&gt;Chess engine&lt;/a&gt; - or now I&amp;rsquo;m thinking, rather a general purpose discreet, game engine. Create an interface to some set of rules which generate moves for a given position (and also indicate a winning move/position) it should be able to learn via self-play. I guess replicating AlphaZero would be the first step?&lt;/li&gt;
&lt;li&gt;&lt;a href="http://alexander.whillas.com/solid-pod-server.html"&gt;Solid Pod Server&lt;/a&gt; - all in one identity/public+private content server with built in authorization (OAuth+). The hard part of Solid, because it was very boring, was trying to understand the standards which are verbose and incomplete. It also uses OAuth + OpenID Connect at the core of its authorization protocol which in itself was the hardest part, because its complicated and I found it hard to find a &lt;a href="https://www.youtube.com/results?search_query=oauth2+flow"&gt;straight forward explanation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cave Boy&lt;/strong&gt;, a kids, open-world, adventure game. I&amp;rsquo;ve started &lt;a href="https://github.com/awhillas/caveboy"&gt;prototyping in Python&lt;/a&gt;. I&amp;rsquo;m thinking something like Don&amp;rsquo;t Starve (but less scary), or Stardew valley (with less detail) with a Captain Underpants sense of humour (i.e. potty). I&amp;rsquo;m thinking to aim it for 4-8 year olds, full touch screen and very simple mechanics. Everything is visually displayed at all times (no hidden menus or state i.e. inventory). TODO: break this out into a full blog post (i will as I get more into it). I have some concept art already!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This list is getting long&amp;hellip;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:young"&gt;
&lt;p&gt;The average age of C++ devs is over 40 these days, see &lt;a href="https://isocpp.org/files/papers/CppDevSurvey-2022-summary.pdf"&gt;Q2 and Q3&lt;/a&gt;, also Q6 notes the major pain point is &amp;ldquo;Managing libraries my application depends on&amp;rdquo;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:young" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:everytime"&gt;
&lt;p&gt;This is why Netflix and Spotify are unicorns despite the fact that you can download everything they publish on torrents for free.&amp;#160;&lt;a class="footnote-backref" href="#fnref:everytime" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Rust"></category></entry><entry><title>Realtime Machine Learning</title><link href="http://alexander.whillas.com/realtime-machine-learning.html" rel="alternate"></link><published>2023-04-29T00:00:00+12:00</published><updated>2023-06-14T00:00:00+12:00</updated><author><name>Alexander Whillas</name></author><id>tag:alexander.whillas.com,2023-04-29:/realtime-machine-learning.html</id><summary type="html">&lt;p&gt;Experiments in online/real-time Machine learning.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the Machine Learning Street Talk podcast&amp;rsquo;s episode on &amp;lsquo;Consciousness In The &lt;a href="https://www.wikiwand.com/en/Chinese_room"&gt;Chinese Room&lt;/a&gt;&amp;rsquo;, Francois Chollet&amp;rsquo;s &lt;a href="https://youtu.be/_KVAzAzO5HU?t=979"&gt;criticism of the thought experiment&lt;/a&gt; struck me&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;of course the person executing the rules does not understand Chinese, that&amp;rsquo;s not where you would expect understanding to be located in the system. Understanding is an imagined property of the information processing system as a whole. Understanding is not in the instructions themselves it&amp;rsquo;s not in the processor that executes the instructions it&amp;rsquo;s in the functional dynamics of how the input information is being processed by the instructions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He goes on to say that he believes the Chinese Room does not understand even if you are looking at the information processing system as a whole its because the book is static, or a crystallized skill, it can not adapt to changing circumstances&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;skill at a task is not sufficient to assert understanding of a task&amp;hellip; intelligence is characterized by the ability to learn and adapt and efficiently pick up new skills from experience&lt;/p&gt;
&lt;p&gt;If you understand what you&amp;rsquo;re doing then you can adapt what you&amp;rsquo;re doing when the world changes you can learn and adapt and improve and if you don&amp;rsquo;t understand what you&amp;rsquo;re doing then you&amp;rsquo;re stuck with a static skill and that&amp;rsquo;s really how you tell the difference between understanding and not understanding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This made me think of what used to be called &amp;ldquo;online learning&amp;rdquo; or real-time learning&lt;sup id="fnref:online"&gt;&lt;a class="footnote-ref" href="#fn:online"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;So now I&amp;rsquo;m interested in doing some experiments with basic simulations, with neural networks that update their weights in real time and see where that leads. This is why I&amp;rsquo;m &lt;a href="http://alexander.whillas.com/a-new-hope.html"&gt;learning Rust&lt;/a&gt; incidentally.&lt;/p&gt;
&lt;h2&gt;Predator and Prey&lt;/h2&gt;
&lt;p&gt;The first experiment I&amp;rsquo;m going to try is a simple hunter-prey simulation like this&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/tVNoetVLuQg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;What &lt;a href="https://www.youtube.com/@PezzzasWork"&gt;Pezzza&lt;/a&gt; is doing here is to take a fixed architecture neural network (NN) with input from a visual field, lines that trace out from the agent and detect the presence of ether friend or foe, and fully connect them to two outputs: speed and direction.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pezzza's agent Neural Network" src="http://alexander.whillas.com/images/Pezzzas_NN.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then, instead of using backpropagation to tune the NN&amp;rsquo;s weights he is choosing them randomly and letting natural selection kill off the bad ones&lt;sup id="fnref:mutation"&gt;&lt;a class="footnote-ref" href="#fn:mutation"&gt;2&lt;/a&gt;&lt;/sup&gt; while the ones that survive long enough to multiply propagate. This allows him to train a NN without an objective function.&lt;/p&gt;
&lt;p&gt;I want to take this basic setup and introduce real-time learning via backpropagation (BP). The problem with BP is that you need an objective function, which says how to update the weights. Its not obvious how to do this in this setup where the output is not the same as the objective function. This is where Reinforcement Learning traditionally.&lt;/p&gt;
&lt;p&gt;There is also &lt;a href="https://www.reddit.com/r/bevy/comments/1464kcq/i_built_a_self_driving_car_ai_using_rust_and_bevy/"&gt;this very similar approch&lt;/a&gt;, in &lt;a href="https://github.com/bones-ai/rust-drive-ai"&gt;Rust and using the Bevy framework&lt;/a&gt; which is exactly where I wanted to go with it.
&lt;a href="https://www.youtube.com/watch?v=H7RWcNgE-6s&amp;amp;t=1s&amp;amp;ab_channel=BonesAI"&gt;AI learns to play retro game road fighter (Reinforcement learning)&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;In search of an objective&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.deepmind.com/blog/alphazero-shedding-new-light-on-chess-shogi-and-go"&gt;AlphaZero&lt;/a&gt; they seem to have trained a NN to rate chess board positions without the needing of an immediate objective, sort of.&lt;/p&gt;
&lt;p&gt;From the paper &lt;a href="https://arxiv.org/pdf/1712.01815.pdf"&gt;Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Predictive Models&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.piekniewski.info/"&gt;Filip Piekniewski&lt;/a&gt; has this idea of &lt;a href="http://blog.piekniewski.info/2016/11/04/predictive-vision-in-a-nutshell/"&gt;predictive vision models&lt;/a&gt; which basically try to guess the next frame of video and there by model the world. One might look at this as the &lt;a href="https://en.wikipedia.org/wiki/Language_model"&gt;language modelling&lt;/a&gt; task of vision. He&amp;rsquo;s also suggesting adding online learning to this mix so the model trains and predicts at the same time, thus, according to Francois Chollet&amp;rsquo;s thesis would make it adaptive and thus conscious? And he&amp;rsquo;s got feedback from top back to bottom. He carries on about &lt;a href="https://www.tutorialspoint.com/artificial_neural_network/artificial_neural_network_associate_memory.htm"&gt;Associate Memory&lt;/a&gt; which is a type of NN (I need to look into)&lt;/p&gt;
&lt;p&gt;to be continued&amp;hellip;&lt;sup id="fnref:wip"&gt;&lt;a class="footnote-ref" href="#fn:wip"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:online"&gt;
&lt;p&gt;&amp;ldquo;Real-time&amp;rdquo; might be a better term as &amp;ldquo;online&amp;rdquo; implies the internet these days.&amp;#160;&lt;a class="footnote-backref" href="#fnref:online" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:mutation"&gt;
&lt;p&gt;Possibly he&amp;rsquo;s also mutating the offspring in order to get variation into the population. There might be crossover, the splicing of genes, by randomly selecting one of the other survivors to mate/share-genes with.&amp;#160;&lt;a class="footnote-backref" href="#fnref:mutation" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:wip"&gt;
&lt;p&gt;This whole page is a work-in-progress and is just to document, and help me work through my ideas&amp;#160;&lt;a class="footnote-backref" href="#fnref:wip" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Machine Learning"></category></entry><entry><title>A new Hope...?</title><link href="http://alexander.whillas.com/a-new-hope.html" rel="alternate"></link><published>2023-04-28T00:00:00+12:00</published><updated>2023-06-16T00:00:00+12:00</updated><author><name>Alexander Whillas</name></author><id>tag:alexander.whillas.com,2023-04-28:/a-new-hope.html</id><summary type="html">&lt;p&gt;A bit about the phylosophy of this website.&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I have decided to start this blog up again to track my (side) development effort and just have somewhere to brain dump.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to follow &lt;a href="https://simblob.blogspot.com/2018/05/thoughts-on-explorable-explanations.html"&gt;Red Blob Games&amp;rsquo; idea&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; of making pages that I continually add to and update that are based around a single project or idea and might accumulate views over a long period.&lt;/p&gt;
&lt;p&gt;The structure will be organic. These pages will in turn branch off into other pages as the details become enough to warrant a new page like the Learning Rust page in which the project are starting to become pages in themselves. Its a collection of notes rather than a linear blog.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m torn about weather I should use google analytics or not. I feel that is more about ego than useful data. But it would be cool to see a HN spike on the graph! Ultimately this site is for me and possibly my son when he is old enough to read, so he can see what was going on in his old mans head.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Funny that I look back on this blog post now, which I must have read in 2018, and realise that what I took away from that blog post was not what it was about. He saw the cumulative pageview chart as a sign that people ate looking for explanations not explorable wizardry. I saw it was the long game is about accumulating views over a long period.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Life"></category></entry></feed>